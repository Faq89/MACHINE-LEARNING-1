# -*- coding: utf-8 -*-
"""MML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tzqEPAoVGG1O1fkuOj8VFxwguBDc_YJ8
"""

import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, roc_auc_score, roc_curve
import pandas as pd
import numpy as np

from google.colab import files
uploaded = files.upload()


df = pd.read_csv('user_fake_authentic_2class.csv')  # dataset

"""infer_objects : La función infer_objects() en pandas es utilizada para inferir automáticamente el tipo de datos de las columnas del DataFrame que tienen tipo de dato object. Esta función convierte las columnas de tipo object a los tipos de datos más específicos posibles según el contenido de los valores de la columna (por ejemplo, convertir cadenas de texto a str, números a int o float, y fechas a datetime)."""

print(df['class'].unique())

# Mapa de valores de texto a números
etiquetas_mapeo = {'f': 0,'r' :1 }  # Ajusta según tu criterio, o asigna valores que tengan sentido

# Reemplazar las etiquetas no numéricas por valores numéricos

df['class'] = df['class'].replace(etiquetas_mapeo).infer_objects()


# Verificar que la columna 'class' ha sido convertida correctamente
print(df['class'].unique())

df.head()

X = df.drop('class', axis=1)
y = df['class']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

# matriz de confusión y clasificación
print("Reporte de clasificación:\n", classification_report(y_test, y_pred))
print("Matriz de Confusión:")
conf_matrix = confusion_matrix(y_test, y_pred)
plt.matshow(conf_matrix, cmap='coolwarm')
plt.title('Matriz de Confusión')
plt.colorbar()
plt.ylabel('Real')
plt.xlabel('Predicción')
plt.show()

columnas_entrenadas = X.columns  # las columnas usadas en el entrenamiento

# Alinear columnas
def alinear_columnas(perfil, columnas_entrenadas):
    perfil_df = pd.DataFrame([perfil])
    perfil_df = perfil_df.reindex(columns=columnas_entrenadas, fill_value=0)  # Rellenar con 0 los valores faltantes
    return perfil_df

def predecir_perfil(model, scaler, perfil, columnas_entrenadas):
    """
    Función que predice si un perfil de Instagram es real (1) o falso (0).

    Parameters:
    model (RandomForestClassifier): El modelo entrenado.
    scaler (StandardScaler): El escalador de datos entrenado.
    perfil (dict): Diccionario con las características del perfil de Instagram.
    columnas_entrenadas (list): Las columnas que fueron usadas durante el entrenamiento.

    Returns:
    int: 1 si el perfil es real, 0 si es falso.
    """

    # Alinear las columnas del perfil con las del modelo entrenado
    perfil_df = alinear_columnas(perfil, columnas_entrenadas)

    # Escalar las características del perfil
    perfil_scaled = scaler.transform(perfil_df)

    # Predecir si el perfil es real o falso
    prediccion = model.predict(perfil_scaled)

    return prediccion[0]

"""
**A PARTIR DE AQUI SE REALIZAN PRUEBAS CON DATOS NUEVOS INGRESADOS DIFERENTES A LA DATASET QUE SE UTILIZO**"""

# Datos del perfil de Instagram
perfil_nuevo = {
    'pos': 1,
    'flw': 1,
    'flg': 0,
    'bl': 5,
    'pic': 20,
    'lin': 1,
    'cl': 0,
    'cz': 0,
    'ni': 0,
    'erl': 25,
    'erc': 15,
    'lt': 0,
    'hc': 1,
    'pr': 1,
    'fo': 1,
    'cs': 0,
    'pi': 0,
}

# Llamada a la función
resultado = predecir_perfil(model, scaler, perfil_nuevo, columnas_entrenadas)

if resultado == 1:
    print("El perfil es real.")
else:
    print("El perfil es falso.")

# Datos del perfil de Instagram (con valores que probablemente indiquen un perfil falso)
perfil_nuevo = {
    'pos': 350,  # Muchos posts
    'flw': 10000,     # Pocos seguidores
    'flg': 10000,   # Muchos siguiendo
    'bl': 0,      # Biografía vacía
    'pic': 0,     # Sin fotos
    'lin': 0,     # Sin enlaces
    'cl': 0,
    'cz': 0,
    'ni': 0,
    'erl': 1066,   # Muchas publicaciones en los últimos días
    'erc': 14,
    'lt': 0,
    'hc': 0,
    'pr': 331,
    'fo': 1,
    'cs': 1,
    'pi': 0,
}

resultado = predecir_perfil(model, scaler, perfil_nuevo, columnas_entrenadas)

if resultado == 1:
    print("El perfil es real.")
else:
    print("El perfil es falso.")

"""**Manual: **

Completa los datos segun corresponda , los datos no completados obtendran un valor automatico, las abrebiaturas se explicaran a continuación.

pos: Representar el número total de publicaciones que tiene un perfil.

flw: Followers o seguidores. El número total de seguidores de un perfil.

flg: Sndique si el perfil tiene ciertas características (por ejemplo, si está verificado, si tiene ciertos permisos, etc).

bl: Blacklist. Este campo podría indicar si el perfil ha sido marcado en alguna lista negra o si tiene algún comportamiento sospechoso o si algun comentario indica fraude o similar.

pic: Pictures o fotos. El número de fotos que tiene el perfil.

lin: Tiene Links disponibles

cl: Se referire a la claridad del perfil (como la calidad de la información disponible, la coherencia del perfil, etc.), o algo relacionado con el tipo de contenido.

cz: Country Zone o zona geográfica. Hacer referencia a la ubicación geográfica del perfil o el número de zonas o países a los que pertenece el perfil (Si incluye un telefono con coodigo de area coherente).

ni: Number of Interactions o número de interacciones. Esto puede ser el número total de interacciones del perfil, como likes, comentarios, etc.

erl: Erlang. Si el perfil es activo(comentarios semanales).

lt: Last Time o tiempo de última actividad. Última interacción o actividad en el perfil.

hc: Hot Content o contenido popular. Este campo indica si el perfil ha generado contenido que ha tenido mucha interacción o que es viral.

pr: Private. Indica si el perfil es privado (1) o público (0).

fo: Followers to Following Ratio o la relación entre seguidores y a quién sigue el perfil. Una relación muy alta o baja podría ser una señal de un perfil sospechoso (cuantos seguidores cada cuantos seguidos).

cs: Check Status o estado de verificación. Indica si el perfil está verificado (como una cuenta oficial) o si se trata de una cuenta falsa.

pi: Profile Image. Indica si el perfil tiene una imagen (1) o no (0).





"""

# prompt: genera unos datos que me den como resultado que el perfil es real

# Datos del perfil de Instagram (con valores que probablemente indiquen un perfil real)
perfil_nuevo = {
    'pos': 350,  # Muchos posts
    'flw': 10000,     # Pocos seguidores
    'flg': 10000,   # Muchos siguiendo
    'bl': 0,      # Biografía vacía
    'pic': 0,     # Sin fotos
    'lin': 0,     # Sin enlaces
    'cl': 0,
    'cz': 0,
    'ni': 0,
    'erl': 1066,   # Muchas publicaciones en los últimos días
    'erc': 14,
    'lt': 0,
    'hc': 0,
    'pr': 331,
    'fo': 1,
    'cs': 1,
    'pi': 0,
}

resultado = predecir_perfil(model, scaler, perfil_nuevo, columnas_entrenadas)

if resultado == 1:
    print("El perfil es real.")
else:
    print("El perfil es falso.")

# Puedes crear más ejemplos con diferentes combinaciones de valores para obtener predicciones de perfiles reales.
# Recuerda que el modelo se ha entrenado con datos específicos, por lo que la precisión puede variar.

# prompt: genera un perfil con datos al azar

import random

def generar_perfil_aleatorio():
  """Genera un perfil de usuario con datos aleatorios."""

  perfil = {
      'pos': random.randint(0, 1000),
      'flw': random.randint(0, 100000),
      'flg': random.randint(0, 100000),
      'bl': random.randint(0, 10),
      'pic': random.randint(0, 500),
      'lin': random.randint(0, 1),
      'cl': random.randint(0, 1),
      'cz': random.randint(0, 1),
      'ni': random.randint(0, 10000),
      'erl': random.randint(0, 1000),
      'erc': random.randint(0, 100),
      'lt': random.randint(0, 1),
      'hc': random.randint(0, 1),
      'pr': random.randint(0, 1),
      'fo': random.randint(0, 1000),
      'cs': random.randint(0, 1),
      'pi': random.randint(0, 1),
  }
  return perfil

# Ejemplo de uso:
perfil_aleatorio = generar_perfil_aleatorio()
perfil_aleatorio

# Puedes usar este perfil aleatorio para probar la función predecir_perfil:
# resultado = predecir_perfil(model, scaler, perfil_aleatorio, columnas_entrenadas)

#facu

# Datos del perfil de Instagram (con valores que probablemente indiquen un perfil real)
perfil_nuevo = {'pos': 39,
 'flw': 2000,
 'flg': 2,
 'bl': 0,
 'pic': 210,
 'lin': 0,
 'cl': 0,
 'cz': 1,
 'ni': 233,
 'erl': 211,
 'erc': 17,
 'lt': 0,
 'hc': 0,
 'pr': 1,
 'fo': 89,
 'cs': 0,
 'pi': 1}

resultado = predecir_perfil(model, scaler, perfil_nuevo, columnas_entrenadas)

if resultado == 1:
    print("El perfil es real.")
else:
    print("El perfil es falso.")

# Puedes crear más ejemplos con diferentes combinaciones de valores para obtener predicciones de perfiles reales.
# Recuerda que el modelo se ha entrenado con datos específicos, por lo que la precisión puede variar.

#Eve

# Datos del perfil de Instagram (con valores que probablemente indiquen un perfil real)
perfil_nuevo = {'pos': 6,
 'flw': 143,
 'flg': 3,
 'bl': 0,
 'pic': 210,
 'lin': 0,
 'cl': 0,
 'cz': 1,
 'ni': 3929,
 'erl': 211,
 'erc': 17,
 'lt': 0,
 'hc': 0,
 'pr': 1,
 'fo': 259,
 'cs': 0,
 'pi': 1}

resultado = predecir_perfil(model, scaler, perfil_nuevo, columnas_entrenadas)

if resultado == 1:
    print("El perfil es real.")
else:
    print("El perfil es falso.")

# Puedes crear más ejemplos con diferentes combinaciones de valores para obtener predicciones de perfiles reales.
# Recuerda que el modelo se ha entrenado con datos específicos, por lo que la precisión puede variar.

#Sant

# Datos del perfil de Instagram (con valores que probablemente indiquen un perfil real)
perfil_nuevo = {'pos': 0,
 'flw': 210,
 'flg': 1,
 'bl': 0,
 'pic': 0,
 'lin': 0,
 'cl': 0,
 'cz': 1,
 'ni': 6,
 'erl': 157,
 'erc': 17,
 'lt': 0,
 'hc': 0,
 'pr': 1,
 'fo': 89,
 'cs': 0,
 'pi': 1}

resultado = predecir_perfil(model, scaler, perfil_nuevo, columnas_entrenadas)

if resultado == 1:
    print("El perfil es real.")
else:
    print("El perfil es falso.")

# Puedes crear más ejemplos con diferentes combinaciones de valores para obtener predicciones de perfiles reales.
# Recuerda que el modelo se ha entrenado con datos específicos, por lo que la precisión puede variar.

#contcEve

# Datos del perfil de Instagram (con valores que probablemente indiquen un perfil real)
perfil_nuevo = {'pos': 877,
 'flw': 74932,
 'flg': 38693,
 'bl': 1,
 'pic': 360,
 'lin': 1,
 'cl': 1,
 'cz': 0,
 'ni': 6624,
 'erl': 82,
 'erc': 83,
 'lt': 0,
 'hc': 0,
 'pr': 1,
 'fo': 349,
 'cs': 0,
 'pi': 0}

resultado = predecir_perfil(model, scaler, perfil_nuevo, columnas_entrenadas)

if resultado == 1:
    print("El perfil es real.")
else:
    print("El perfil es falso.")

# Puedes crear más ejemplos con diferentes combinaciones de valores para obtener predicciones de perfiles reales.
# Recuerda que el modelo se ha entrenado con datos específicos, por lo que la precisión puede variar.

#contcMiguel

# Datos del perfil de Instagram (con valores que probablemente indiquen un perfil real)
perfil_nuevo = {'pos': 6,
 'flw': 74932,
 'flg': 38693,
 'bl': 1,
 'pic': 360,
 'lin': 1,
 'cl': 1,
 'cz': 0,
 'ni': 6624,
 'erl': 82,
 'erc': 83,
 'lt': 0,
 'hc': 0,
 'pr': 1,
 'fo': 349,
 'cs': 0,
 'pi': 0}

resultado = predecir_perfil(model, scaler, perfil_nuevo, columnas_entrenadas)

if resultado == 1:
    print("El perfil es real.")
else:
    print("El perfil es falso.")

# Puedes crear más ejemplos con diferentes combinaciones de valores para obtener predicciones de perfiles reales.
# Recuerda que el modelo se ha entrenado con datos específicos, por lo que la precisión puede variar.